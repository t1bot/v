COUNTER
module up_counter(input clk, reset, output[3:0] counter
 );
reg [3:0] counter_up;
// up counter
always @(posedge clk or posedge reset)
begin
if(reset)
counter_up <= 4'd0;
else
counter_up <= counter_up + 4'd1;
end
assign counter = counter_up;
endmodule

TESTBENCH
module upcounter_testbench();
	reg clk, reset;
	wire [3:0] counter;
	up_counter dut(clk, reset, counter);
initial begin
	clk=0;
	forever #5 clk=~clk;
	end
initial begin
	   $dumpfile("dump.vcd");
       $dumpvars(0, upcounter_testbench);
       reset=1;
       #20;
       reset=0;
       $finish;
end
endmodule

FULL ADDER

module full_adder( A,B,CIN,S,COUT);
input A,B,CIN;
output S,COUT;
assign S = A^B^CIN;
assign COUT = (A&B) | (CIN&(A^B));
endmodule


module four_bit_adder(A,B,C0,S,C4);
  input [3:0] A,B;
  input C0;
  output [3:0] S;
  output C4;
wire C1,C2,C3;
full_adder fa0 (A[0],B[0],C0,S[0],C1);
full_adder fa1 (A[1],B[1],C1,S[1],C2);
full_adder fa2 (A[2],B[2],C2,S[2],C3);
full_adder fa3 (A[3],B[3],C3,S[3],C4);
endmodule

TEST BENCH 

module test_4_bit;
reg [3:0] A;
reg [3:0] B;
reg C0;
wire [3:0] S;
wire C4;
four_bit_adder dut(A,B,C0,S,C4);
initial begin
   $dumpfile("dump.vcd");
  $dumpvars(0, test_4_bit);
A = 4'b0011;B=4'b0011;C0 = 1'b1; #10;
A = 4'b1011;B=4'b0111;C0 = 1'b1; #10;
A = 4'b1111;B=4'b1111;C0 = 1'b1; #10;
end
initial
#50 $finish;
endmodule

ALU CASE STATEMENT
module alu_32bit_case(y,a,b,f);
input [31:0]a;
input [31:0]b;
input [2:0]f;
output reg [31:0]y;
always@(*)
begin
case(f)
3'b000:y=a&b; //AND Operation
3'b001:y=a|b; //OR Operation
3'b010:y=~(a&b); //NAND Operation
3'b011:y=~(a|b); //NOR Operation
3'b100:y=a+b; //Addition
3'b101:y=a-b; //Subtraction
3'b110:y=a*b; //Multiply
default:y=32'bx;
endcase
end
endmodule

TEST BENCH 
module alu_32bit_tb_case;
reg [31:0]a;
reg [31:0]b;
reg [2:0]f;
wire [31:0]y;
alu_32bit_case test2(.y(y),.a(a),.b(b),.f(f));
initial
begin
   $dumpfile("dump.vcd");
  $dumpvars(0, alu_32bit_tb_case);
a=32'h00000011;
b=32'h00000011;
#10 f=3'b100;
#10 f=3'b001;
#10 f=3'b010;
#10 f=3'b000;
end
initial
#50 $finish; endmodule  
ALU IF 

module alu_32bit_if(y,a,b,f);
input [31:0]a;
input [31:0]b;
input [2:0]f;
output reg [31:0]y;
always@(*)
begin
if(f==3'b000)
y=a&b; //AND Operation
else if (f==3'b001)
y=a|b; //OR Operation
else if (f==3'b010)
y=a+b; //Addition
else if (f==3'b011)
y=a-b; //Subtraction
else if (f==3'b100)
y=a*b; //Multiply
else
y=32'bx;
end
endmodule

test bench

module alu_32bit_tb_if;
reg [31:0]a;
reg [31:0]b;
reg [2:0]f;
wire [31:0]y;
alu_32bit_if test(.y(y),.a(a),.b(b),.f(f));
initial
begin
   $dumpfile("dump.vcd");
  $dumpvars(0, alu_32bit_tb_if);
a=32'h00000001;
b=32'h00000001;
#10 f=3'b010;
#10 f=3'b001;
#10 f=3'b010;
#10 f=3'b100;
end
endmodule




STEPS COUNTER
read_libs /home/install/FOUNDRY/digital/90nm/dig/lib/slow.lib
read_hdl counter.v
elaborate
read_sdc constraints_top.sdc
set_db syn_generic_effort medium
set_db syn_map_effort medium
set_db syn_opt_effort medium
syn_generic
syn_map
syn_opt 
report_timing > counter_timing.rep
report_area > counter_area.rep
report_power > counter_power.rep
write_hdl > counter_netlist.v
write_sdc > counter_sdc.sdc


STEPS FULL ADDER

read_libs /home/install/FOUNDRY/digital/90nm/dig/lib/slow.lib
read_hdl {adder.v}
elaborate
set_top_module four_bit_adder
set_dont_use *XL 
set_db syn_generic_effort medium 
set_db syn_generic_effort medium
set_db syn_map_effort medium
set_db syn_opt_effort medium
syn_generic
syn_map
syn_opt
report_area > adder_area.rep
report_power > adder_power.rep
write_hdl > adder_netlist.v
write_sdc > adder_sdc.sdc
report_qor > adder_qor.rpt


Steps for ALU
read_libs /home/install/FOUNDRY/digital/90nm/dig/lib/slow.lib
read_hdl {alu_32bit_if.v (OR) alu_32bit_case.v}
elaborate
read_sdc constraints_top.sdc
set_db syn_generic_effort medium
set_db syn_map_effort medium
set_db syn_opt_effort medium
syn_generic
syn_map
syn_opt 
report_timing > alu_timing.rep
report_area > alu_area.rep
report_power > alu_power.rep
write_hdl > alu_netlist.v
write_sdc > alu_sdc.sdc



